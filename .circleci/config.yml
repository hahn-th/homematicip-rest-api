# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test_3_6_1:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements_dev.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements_dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements_dev.txt" }}
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv
            bash <(curl -s https://codecov.io/bash)

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports

  test_3_7_0:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.0
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements_dev.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements_dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements_dev.txt" }}
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports

  test_3_8_0:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8.0
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements_dev.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements_dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements_dev.txt" }}
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout

      - restore_cache:
          key: v1-dependency-cache-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}

      - run:
          name: install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install coverage codecov pylint twine sphinx sphinx-autobuild sphinx_rtd_theme
            pip install -r requirements.txt
            pip install -e .
            
      - save_cache:
          key: v1-dependency-cache-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create packages
          command: |
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test_3_6_1:
          filters:
            tags:
              only: /.*/
      - test_3_7_0:
          filters:
            tags:
              only: /.*/
      - test_3_8_0:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - test_3_6_1
            - test_3_7_0
            - test_3_8_0
          filters:
            branches:
              only: master
