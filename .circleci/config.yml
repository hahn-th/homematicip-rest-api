# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

jobs:
  test_3_10:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: cimg/python:3.10
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"

    working_directory: ~/repo

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout

      - restore_cache:
          key: v1-dependency-cache-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}

      - run:
          name: install python dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install coverage codecov pylint twine sphinx sphinx-autobuild sphinx_rtd_theme
            pip install -r requirements.txt
            pip install -e .
            
      - save_cache:
          key: v1-dependency-cache-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create packages
          command: |
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*
            
  test_3_9:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.9
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements_dev.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install -r requirements_dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements_dev.txt" }}
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv
            bash <(curl -s https://codecov.io/bash)

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports
          
workflows:
  version: 2
  build_and_deploy:
    jobs:
      #- test_3_10:
      #    filters:
      #      tags:
      #        only: /.*/
      - test_3_9:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - test_3_9
            #- test_3_10
          filters:
            branches:
              only: master
